pragma solidity ^0.6.0;

import "./AccessControl.sol";
import "./Context.sol";
import "./Counters.sol";
import "./ERC721.sol";
import "./ERC721Burnable.sol";
import "./ERC721Pausable.sol";
import "./SafeMath.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract ERC721PresetMinterPauserAutoId is Context, AccessControl, ERC721Burnable, ERC721Pausable {
    
    using SafeMath for uint256;
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");


address  payable public owner; 

address  payable public lenderAddress; 
uint256 public repaymentAmount;
address payable public feeDepositor=0xF84D1884a1AD77409D0E2C4D69C6a8915Cdcdb39;
uint256 public loanAmount;
uint256 public totalInt;
 uint256 public totalCal;
  uint256 public loanAmtToPay;

    Counters.Counter private _tokenIdTracker;
    
      struct whrStruct{
        string quantity;
        string otherDetails;      
        address owner;   
        uint256 interest;
        uint256 charges;
         uint256 tenure;
       uint256  price;   
        int256 ethprice;
       int256 m2mRatio ;
         bool m2mStatus ;
    }
       whrStruct public whr;
    

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory name, string memory symbol, string memory baseURI,
    string memory quantity, 
           string memory otherDetails,
         uint256 interest,
        uint256 charges,
         uint256 tenure,
        int256 ethprice,
        uint256 price,
        int256 m2mRatio
        ) public ERC721(name, symbol) {
            whr.quantity=quantity;
              whr.owner=msg.sender;
                whr.charges=charges;
                  whr.otherDetails=otherDetails;
                    whr.interest=interest;
                      whr.tenure=tenure;
                      whr.price=price;
                        whr.ethprice=ethprice;
                        whr.m2mRatio=m2mRatio;
            owner=msg.sender;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());

        _setBaseURI(baseURI);
        //   mint(msg.sender);
    }
   
  
  event loan(address add, uint256 value, uint256 inr,  uint256 char );
  event repayment(address add,  uint256 value, uint256 inr,  uint256 char );
  
  fallback() external payable { 
     uint value=msg.value;
     uint amount= uint((whr.ethprice/100)*10**18) * uint(70)/uint(100);
     require(value <= amount,"Loan amount should not more then 70%");
      if(msg.sender==owner){
          repaymentAmount+=msg.value; 
          repayment(msg.sender,msg.value,0,0);
        //   if(repaymentAmount >=  (loanAmount + totalInt)) 
            unpause() ;  
           
      }else{
          uint feeCal= value * uint(whr.charges)/ 10000;
          feeDepositor.transfer(feeCal); 
          uint IntCal= value * uint(whr.interest)/ 10000;
          totalInt=IntCal;
          totalCal=feeCal;
          loanAmtToPay+=value-(feeCal)-(IntCal);
          loanAmount+=msg.value;
          lenderAddress=msg.sender;
          loan(msg.sender,msg.value,feeCal,IntCal);
          pause();
      }
}
  


      function borrowerWithdraw() external  {
       owner.transfer(loanAmtToPay);
  }
  
     function lenderWithdraw() external  {
       lenderAddress.transfer(repaymentAmount+totalInt);
  }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
        _pause();
    }


 function updateEthPrice( int256 ethPrice) public virtual {
     whr.ethprice=ethPrice;
    }
    
    
function updateRatio( int256 ratio) public virtual {
     whr.m2mRatio=ratio;
    }
    
  
   function mTwoMCheck( int256 currenctPrice) public virtual returns (int256 perDiff) {
   if(currenctPrice < ( whr.ethprice/100)){
      int256 diff=  whr.ethprice -(currenctPrice);
       perDiff= ((diff*100) / whr.ethprice);
      if(perDiff>=(whr.m2mRatio)){
        whr.m2mStatus=true; 
        unpause();
        transferFrom(owner,lenderAddress,0);
      }
       
   }
      return (perDiff);
}
    
    
    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
